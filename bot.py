# -*- coding: utf-8 -*-
import os
import logging
import asyncio
from collections import defaultdict
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup

# ── ВСТАВЬ ТОКЕН ЗДЕСЬ ─────────────────────────────────────────────────────────
# Токен берётся из переменных окружения (Replit Secrets)
API_TOKEN = os.getenv("API_TOKEN", "").strip()

if not API_TOKEN:
    raise RuntimeError(
        "Не найден API_TOKEN. Добавь его в переменные окружения или впиши в код."
    )

# ── ЛОГИ/БОТ ───────────────────────────────────────────────────────────────────
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ── 6 МЕД-АРХЕТИПОВ ───────────────────────────────────────────────────────────
TYPES = [
    "Шизоид", "Психастеник", "Эпилептоид", "Истероид", "Неврастеник",
    "Депрессивный"
]

PROFILE = {
    "Шизоид": {
        "alias":
        "Архетип Мудреца",
        "desc":
        "Человек смысла и тишины. При стрессе уходит в мысли, тело «отключает».",
        "nervous":
        "Доминирует неокортекс, слабая связь с телом.",
        "soma":
        "Шея/плечи, глаза, голова; склонность к бессоннице.",
        "hygiene":
        "Сенсорное заземление, медленное дыхание, паузы без экрана, тёплый душ.",
        "triggers":
        "Шум, давление, вторжение в личное пространство, бессмысленные разговоры.",
        "recovery":
        "Тишина, прогулка, ритуалы (чай, свеча), фокус «чувствую тело».",
        "partner":
        "Тёплая телесная энергия (гедонистический полюс) — учит расслабляться и радоваться."
    },
    "Психастеник": {
        "alias": "Архетип Искателя",
        "desc":
        "Тонкая чувствительность и тревожный контроль. Ищет безопасность и ясность.",
        "nervous": "Легко перевозбуждается от неопределённости.",
        "soma": "Диафрагма/ЖКТ, дыхание, сердцебиение.",
        "hygiene":
        "Дыхание 4–6, план на день, дневник благодарности, тёплая еда.",
        "triggers": "Резкие перемены, критика, хаос в расписании.",
        "recovery":
        "Стабильные ритуалы, опора на ощущения тела, мягкий поддерживающий диалог.",
        "partner": "Структурный полюс (Воин/Эпилептоид) — даёт опору и форму."
    },
    "Эпилептоид": {
        "alias":
        "Архетип Воина",
        "desc":
        "Сила, структура, контроль. Телу нужен безопасный выход энергии.",
        "nervous":
        "Склонность к мобилизации, высокий тонус.",
        "soma":
        "Спазмы, челюстное напряжение, гипертония, головные боли.",
        "hygiene":
        "Физическая разрядка, растяжка, длинный выдох через рот, массаж шеи/плеч.",
        "triggers":
        "Хаос, отсутствие правил, пассивность окружающих.",
        "recovery":
        "Порядок, чёткие задачи, спорт, дыхание с акцентом на выдох.",
        "partner":
        "Тёплый поддерживающий полюс (Заботливый/Депрессивный) — смягчает и наполняет."
    },
    "Истероид": {
        "alias": "Архетип Творца",
        "desc":
        "Эмоциональная выразительность и потребность быть увиденным. Источник вдохновения.",
        "nervous": "Лимбическая система активна, эмоции быстро вспыхивают.",
        "soma": "Кожа, горло/дыхание; психофизиология голоса и сцены.",
        "hygiene":
        "Дневник эмоций, «дыхание через сердце», ограничение экранов, практика самоценности.",
        "triggers": "Игнорирование, холодность, монотонность.",
        "recovery": "Самовыражение, творчество, поддержка зрителем/другом.",
        "partner": "Мудрец/Шизоид — даёт глубину и заземляет к процессу."
    },
    "Неврастеник": {
        "alias":
        "Архетип Лидера",
        "desc":
        "Высокая активность и истощаемость. Быстрый старт — риск выгорания.",
        "nervous":
        "Колебания тонуса, ресурс заканчивается незаметно.",
        "soma":
        "Сердце/сосуды, слабость, мышечный тонус.",
        "hygiene":
        "Режим сна, прогулки без телефона, отказ от многозадачности, утренние растяжки.",
        "triggers":
        "Переутомление, сверхответственность, постоянный контроль.",
        "recovery":
        "Планируемые паузы, делегирование, дыхание 4–6.",
        "partner":
        "Устойчивый «воинский» полюс (Эпилептоид) — помогает дозировать нагрузку."
    },
    "Депрессивный": {
        "alias":
        "Архетип Заботливого",
        "desc":
        "Глубокая эмпатия и склонность забывать о себе. Телу нужна мягкая энергия.",
        "nervous":
        "Снижение тонуса при перегрузе эмоциями.",
        "soma":
        "Спина/грудь, желудок, склонность к низкому давлению.",
        "hygiene":
        "Тепло, практики на выдох, «забота о себе» как ритуал, мягкая нагрузка.",
        "triggers":
        "Вина, одиночество, переизбыток заботы о других.",
        "recovery":
        "Объятия, признание потребностей, осознанное питание и отдых.",
        "partner":
        "Собранный лидерский полюс (Неврастеник) — включает движение и ясность."
    },
}

LETTER2TYPE = {
    "A": "Шизоид",
    "B": "Психастеник",
    "C": "Эпилептоид",
    "D": "Истероид",
    "E": "Неврастеник",
    "F": "Депрессивный",
}

# ── 12 КОРОТКИХ ВОПРОСОВ ──────────────────────────────────────────────────────
QUESTIONS = [
    "1. Когда накрывает стресс, первично включается…\nA) мысли\nB) тревога\nC) действие\nD) эмоции\nE) контроль/задача\nF) забота о других",
    "2. В теле чаще всего ощущаю…\nA) голову/глаза/шею\nB) диафрагму/живот\nC) спазм/челюсть/плечи\nD) горло/дыхание/кожу\nE) сердце/усталость\nF) тяжесть в спине/груди",
    "3. Больше всего невыносимо…\nA) пустые разговоры\nB) неопределённость\nC) хаос и нет правил\nD) когда меня не видят\nE) нескончаемые задачи\nF) быть нужным всем всегда",
    "4. Быстрее всего восстанавливаюсь через…\nA) тишину/одиночество\nB) ритуалы/план\nC) спорт/разрядку\nD) творчество/самовыражение\nE) прогулку/сон\nF) тепло/объятия",
    "5. В конфликтах я обычно…\nA) ухожу в анализ\nB) тревожусь и проверяю\nC) иду в лоб\nD) реагирую эмоционально\nE) беру контроль\nF) сглаживаю и поддерживаю",
    "6. Идеальный день — это…\nA) книга и тишина\nB) порядок и планы\nC) движение и результат\nD) сцена/студия/креатив\nE) цель/команда\nF) дом/уют/тепло",
    "7. Внутренняя цель ближе…\nA) понять суть\nB) чувствовать безопасность\nC) сделать и победить\nD) быть увиденным/вдохновлять\nE) вести и влиять\nF) заботиться и соединять",
    "8. В теле особенно помогает…\nA) сенсорное заземление\nB) дыхание 4–6\nC) растяжка + выдох через рот\nD) «дыхание через сердце»\nE) утренние растяжки/ходьба\nF) тёплые ванны/мягкая нагрузка",
    "9. В работе важнее…\nA) смысл\nB) стабильность\nC) порядок/структура\nD) креатив\nE) результат/влияние\nF) польза людям",
    "10. Лучшая фраза-поддержка сейчас…\nA) «Чувствую тело, не только мысли»\nB) «У меня есть опоры»\nC) «Сила — в действии и выдохе»\nD) «Я ценен(а), даже когда меня не видят»\nE) «Я могу меньше контролировать»\nF) «Я тоже важен(на) для себя»",
    "11. В отношениях ищу прежде всего…\nA) понимание и пространство\nB) надёжность и предсказуемость\nC) честность и рамки\nD) внимание и отклик\nE) партнёрство и цели\nF) тепло и принятие",
    "12. Когда устаю, мне вреднее всего…\nA) перегруз информацией\nB) отсутствие плана\nC) сидячее бездействие\nD) молчаливое игнорирование\nE) бесконечные задачи\nF) забыть о себе ради других",
]

# ── СОСТОЯНИЕ ПОЛЬЗОВАТЕЛЕЙ ───────────────────────────────────────────────────
users = defaultdict(
    lambda: {
        "step": 0,
        "scores": defaultdict(int),
        "finished": False,
        "result": None,
        "daily": False,
    })


def kb_answers():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("A", "B", "C")
    kb.row("D", "E", "F")
    return kb


def kb_post_result():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("✨ Узнать больше", "💞 Партнёрский архетип")
    kb.row("🌿 Психогигиена", "🔁 Пройти тест заново")
    return kb


# ── ХЭНДЛЕРЫ ─────────────────────────────────────────────────────────────────
@dp.message_handler(commands=["start", "restart"])
async def cmd_start(msg: types.Message):
    uid = msg.from_user.id
    users[uid] = {
        "step": 0,
        "scores": defaultdict(int),
        "finished": False,
        "result": None,
        "daily": False
    }
    await msg.answer(
        "Привет 🌿 Это SoulMap MED.\n"
        "12 коротких вопросов помогут определить твой психотип и дать телесно-медицинские рекомендации.\n\n"
        + QUESTIONS[0],
        reply_markup=kb_answers())


@dp.message_handler(lambda m: m.text == "🔁 Пройти тест заново")
async def restart(msg: types.Message):
    await cmd_start(msg)


@dp.message_handler(lambda m: m.text and m.text.upper() in "ABCDEF")
async def handle_answer(msg: types.Message):
    uid = msg.from_user.id
    if users[uid]["finished"]:
        await msg.answer(
            "Тест уже завершён. Нажми «🔁 Пройти тест заново», чтобы пройти снова.",
            reply_markup=kb_post_result())
        return

    letter = msg.text.upper()
    t = LETTER2TYPE[letter]
    users[uid]["scores"][t] += 1
    users[uid]["step"] += 1

    step = users[uid]["step"]
    if step < len(QUESTIONS):
        await msg.answer(QUESTIONS[step], reply_markup=kb_answers())
    else:
        # Завершение
        scores = users[uid]["scores"]
        primary = max(scores, key=scores.get)
        # второстепенный
        second = None
        if len(scores) > 1:
            second = sorted(scores.items(), key=lambda x: x[1],
                            reverse=True)[1][0]

        users[uid]["finished"] = True
        users[uid]["result"] = primary
        p = PROFILE[primary]

        await msg.answer("✨ Анализирую твои ответы…")
        await asyncio.sleep(0.7)

        text = (f"✨ Твой психотип: *{primary}* ({p['alias']})\n\n"
                f"_О тебе_: {p['desc']}\n\n"
                f"⚕️ *Нервная система*: {p['nervous']}\n"
                f"🫀 *Психосоматика*: {p['soma']}\n\n"
                f"🌿 *Психогигиена*: {p['hygiene']}\n\n"
                f"💫 *Триггеры*: {p['triggers']}\n"
                f"🧩 *Восстановление*: {p['recovery']}\n\n"
                f"💞 *Партнёрский архетип*: {p['partner']}\n" +
                (f"\n_Второй по силе_: {second}" if second else ""))
        await msg.answer(text,
                         parse_mode="Markdown",
                         reply_markup=kb_post_result())


@dp.message_handler(
    lambda m: m.text in
    ["✨ Узнать больше", "💞 Партнёрский архетип", "🌿 Психогигиена"])
async def post_menu(msg: types.Message):
    uid = msg.from_user.id
    if not users[uid]["finished"]:
        await msg.answer("Сначала пройди тест: /start")
        return
    arch = users[uid]["result"]
    p = PROFILE[arch]

    if msg.text == "✨ Узнать больше":
        await msg.answer(
            f"Глубже про *{arch}* ({p['alias']}):\n"
            f"— Лучше всего восстанавливаешься через: {p['recovery']}\n"
            f"— Помни о триггерах: {p['triggers']}\n"
            f"— Ключевая практика: {p['hygiene']}",
            parse_mode="Markdown",
            reply_markup=kb_post_result())
    elif msg.text == "💞 Партнёрский архетип":
        await msg.answer(f"💞 Тебя уравновешивает: {p['partner']}",
                         reply_markup=kb_post_result())
    elif msg.text == "🌿 Психогигиена":
        await msg.answer(f"🌿 Психогигиена для *{arch}*:\n{p['hygiene']}",
                         parse_mode="Markdown",
                         reply_markup=kb_post_result())


@dp.message_handler()
async def fallback(msg: types.Message):
    uid = msg.from_user.id
    if not users[uid]["finished"]:
        step = users[uid]["step"]
        if step < len(QUESTIONS):
            await msg.answer("Пожалуйста, отвечай буквами A–F 😊\n\n" +
                             QUESTIONS[step],
                             reply_markup=kb_answers())
        else:
            await msg.answer("Нажми /start чтобы начать заново.")
    else:
        await msg.answer("Выбери пункт в меню ниже 👇",
                         reply_markup=kb_post_result())


if __name__ == "__main__":
    print("✅ SoulMap MED • автономная версия запущена")
    executor.start_polling(dp, skip_updates=True)
